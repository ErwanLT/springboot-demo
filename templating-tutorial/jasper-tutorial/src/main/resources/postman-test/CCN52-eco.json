{
  "exportName": "test.pdf",
  "reportType": "CCN52",
  "parameters": [
    {
      "name": "jsonString",
      "value": "{\n \"devisXML\":\"<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<origin>
    <cart domain="-" id="PPOAV_REC_8e37e885-25f4-48b8-86ff-1d1dbc879276" release="1" type="C">
        
        <modelPK id="Agrica" release="1"/>
        
        <createInfo date="20230608 093510" groupID="SalesRep" userID="administrateur@groupagrica.com" userName="AISC admin"/>
        
        <updateInfo date="20230608 093638" groupID="SalesRep" userID="administrateur@groupagrica.com" userName="AISC admin"/>
        
        <ownerInfo date="20230608 093510" groupID="SalesRep" userID="administrateur@groupagrica.com" userName="AISC admin"/>
        
        <activeInfo active="on" date="20230608 093510"/>
        
        <statusInfo date="20230608 093510" status="Draft"/>
        	
        <fields>
            		
            <ParameterTab.DomainId>-</ParameterTab.DomainId>
            		
            <ParameterTab.ReleaseNumber>1</ParameterTab.ReleaseNumber>
            		
            <ParameterTab.QuoteId>PPOAV_REC_8e37e885-25f4-48b8-86ff-1d1dbc879276</ParameterTab.QuoteId>
            		
            <ParameterTab.CustomerId/>
            		
            <ParameterTab.Language>FR</ParameterTab.Language>
            		
            <ParameterTab.Currency>EUR</ParameterTab.Currency>
            		
            <ParameterTab.QuoteDescription>-</ParameterTab.QuoteDescription>
            		
            <ParameterTab.ApplicationDate/>
            		
            <ParameterTab.PriceList/>
            		
            <ParameterTab.AdvPriceList/>
            		
            <ParameterTab.PartnerCode>B2CPartner</ParameterTab.PartnerCode>
            		
            <ParameterTab.UserCode/>
            		
            <ParameterTab.LeadId/>
            		
            <ParameterTab.ParentAccountId/>
            		
            <ParameterTab.ExternalId/>
            		
            <AddressTab.SoldTo.CustomerId/>
            		
            <AddressTab.SoldTo.CustomerName/>
            		
            <AddressTab.SoldTo.Street/>
            		
            <AddressTab.SoldTo.ContactName/>
            		
            <AddressTab.SoldTo.City/>
            		
            <AddressTab.SoldTo.ZipCode/>
            		
            <AddressTab.SoldTo.State/>
            		
            <AddressTab.SoldTo.Country/>
            		
            <AddressTab.BillTo.CustomerId/>
            		
            <AddressTab.BillTo.CustomerName/>
            		
            <AddressTab.BillTo.Street/>
            		
            <AddressTab.BillTo.ContactName/>
            		
            <AddressTab.BillTo.City/>
            		
            <AddressTab.BillTo.ZipCode/>
            		
            <AddressTab.BillTo.State/>
            		
            <AddressTab.BillTo.Country/>
            		
            <AddressTab.ShipTo.CustomerId/>
            		
            <AddressTab.ShipTo.CustomerName/>
            		
            <AddressTab.ShipTo.Street/>
            		
            <AddressTab.ShipTo.ContactName/>
            		
            <AddressTab.ShipTo.City/>
            		
            <AddressTab.ShipTo.ZipCode/>
            		
            <AddressTab.ShipTo.State/>
            		
            <AddressTab.ShipTo.Country/>
            		
            <CartInfoTab.TotalQuote>0</CartInfoTab.TotalQuote>
            		
            <CartInfoTab.CloseDate>2013-07-14T00:00:00.000+02:00</CartInfoTab.CloseDate>
            		
            <CartInfoTab.OwnerIdNotTouch>Rose Gonzalez</CartInfoTab.OwnerIdNotTouch>
            		
            <CartInfoTab.OwnerAddress>4270 Tuscany Street  Corona, CA 92881, États-Unis (951) 284-1050</CartInfoTab.OwnerAddress>
            		
            <CartInfoTab.OwnerLogo/>
            		
            <CartInfoTab.UserFirstName>Rose</CartInfoTab.UserFirstName>
            		
            <CartInfoTab.UserMail/>
            		
            <CartInfoTab.UserLastName>Gonzalez</CartInfoTab.UserLastName>
            		
            <CartInfoTab.UserPhone/>
            		
            <OrderInfoTab.OrderId/>
            		
            <ChangeAndControlTab.ActiveRelease>1</ChangeAndControlTab.ActiveRelease>
            		
            <ChangeAndControlTab.ActiveReleaseDate>20230608 093510</ChangeAndControlTab.ActiveReleaseDate>
            		
            <ChangeAndControlTab.CurrentStatus>Draft</ChangeAndControlTab.CurrentStatus>
            		
            <ChangeAndControlTab.StatusDate>20230608 093510</ChangeAndControlTab.StatusDate>
            		
            <ChangeAndControlTab.CurrentOwnerId>administrateur@groupagrica.com</ChangeAndControlTab.CurrentOwnerId>
            		
            <ChangeAndControlTab.CurrentOwnerName>AISC admin</ChangeAndControlTab.CurrentOwnerName>
            		
            <ChangeAndControlTab.CurrentOwnerGroup>SalesRep</ChangeAndControlTab.CurrentOwnerGroup>
            		
            <ChangeAndControlTab.OwnerDate>20230608 093510</ChangeAndControlTab.OwnerDate>
            		
            <ChangeAndControlTab.CreateUserId>administrateur@groupagrica.com</ChangeAndControlTab.CreateUserId>
            		
            <ChangeAndControlTab.CreateUserName>AISC admin</ChangeAndControlTab.CreateUserName>
            		
            <ChangeAndControlTab.CreateUserGroup>SalesRep</ChangeAndControlTab.CreateUserGroup>
            		
            <ChangeAndControlTab.CreateDate>20230608 093510</ChangeAndControlTab.CreateDate>
            		
            <ChangeAndControlTab.LastUpdateUserId>administrateur@groupagrica.com</ChangeAndControlTab.LastUpdateUserId>
            		
            <ChangeAndControlTab.LastUpdateUserName>AISC admin</ChangeAndControlTab.LastUpdateUserName>
            		
            <ChangeAndControlTab.LastUpdateUserGroup>SalesRep</ChangeAndControlTab.LastUpdateUserGroup>
            		
            <ChangeAndControlTab.LastUpdateDate>20230608 093638</ChangeAndControlTab.LastUpdateDate>
            	
        </fields>
        	
        <totalCells>
            		
            <TotalPrice1>0</TotalPrice1>
            		
            <Tax>0</Tax>
            		
            <TCTotTax>0</TCTotTax>
            		
            <TotalPrice2>0</TotalPrice2>
            		
            <TCDiscount>0</TCDiscount>
            		
            <CommPctPrice1>0</CommPctPrice1>
            		
            <CommPctPrice2>0</CommPctPrice2>
            		
            <TotalComm1>0</TotalComm1>
            		
            <TotalComm2>0</TotalComm2>
            	
        </totalCells>
        	
        <cartLines>
            		
            <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="1" parent="0" seqNum="0" service="CONF_CCN52" subline="no" type="CP7">
                			
                <itemXML>
                    <conf:ConfigurationTree xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0">
                        <conf:SavingPolicy configurationDetails="true" domainDetails="false" generativeProcess="true" manufacturing="false" notExisting="false" notUserChoice="true" productDictionary="true" sparePartsDetails="false" svgDepth="NONE" type="Custom"/>
                        <conf:Settings>
                            <cam:User>
                                <cam:Param cpe="CPE.Settings.User.Identifier" value="administrateur@groupagrica.com"/>
                                <cam:Param cpe="CPE.Settings.User.Language" value="fr"/>
                                <cam:Param cpe="CPE.Settings.User.DefaultLanguage" value="en"/>
                                <cam:Param cpe="CPE.Settings.User.Currency" value="EUR"/>
                                <cam:Param cpe="CPE.Settings.User.CurrencySymbol" value="€"/>
                                <cam:Param cpe="CPE.Settings.User.MonetaryFormat" value="#,##0.00 ¤"/>
                                <cam:Param cpe="CPE.Settings.User.NumericFormat" value="#,##0.##"/>
                                <cam:Param cpe="CPE.Settings.User.IntegerFormat" value="#,##0"/>
                                <cam:Param cpe="CPE.Settings.User.TimeZone" value="GMT"/>
                                <cam:Param cpe="CPE.Settings.User.License" value="named"/>
                                <cam:Param cpe="CPE.Settings.User.LongDateFormat" value="dd/MM/yyyy HH:mm"/>
                                <cam:Param cpe="CPE.Settings.User.ShortDateFormat" value="MMMM yyyy"/>
                                <cam:Param cpe="CPE.Settings.User.Country" value="FR"/>
                            </cam:User>
                            <cam:HostingApplication>
                                <cam:Param cpe="CPE.Settings.Application.Name" value="CEQ"/>
                            </cam:HostingApplication>
                            <cam:Session>
                                <cam:Param cpe="CPE.Settings.Session.ModelVersion" value="RELEASE:V16.6.0"/>
                                <cam:Param cpe="CPE.Settings.Session.ApplicationDate" value="2023-06-08T09:35:10.714+02:00"/>
                                <cam:Param cpe="CPE.Settings.Session.Language" value="fr"/>
                                <cam:Param cpe="CPE.Settings.Session.DefaultLanguage" value="en"/>
                                <cam:Param cpe="CPE.Settings.Session.Currency" value="EUR"/>
                                <cam:Param cpe="CPE.Settings.Session.CurrencySymbol" value="€"/>
                                <cam:Param cpe="CPE.Settings.Session.MonetaryFormat" value="#,##0.00 ¤"/>
                                <cam:Param cpe="CPE.Settings.Session.NumericFormat" value="#,##0.##"/>
                                <cam:Param cpe="CPE.Settings.Session.IntegerFormat" value="#,##0"/>
                                <cam:Param cpe="CPE.Settings.Session.TimeZone" value="GMT"/>
                                <cam:Param cpe="CPE.Settings.Session.LongDateFormat" value="dd/MM/yyyy HH:mm"/>
                                <cam:Param cpe="CPE.Settings.Session.ShortDateFormat" value="MMMM yyyy"/>
                                <cam:Param cpe="CPE.Settings.Session.Country" value="FR"/>
                                <cam:Param cpe="CPE.Settings.Session.SessionID" value="TdsZuYcyyh1PONfYfwa+ALqW"/>
                                <cam:Param cpe="CPE.Settings.Session.AnalyticsUserId" value="administrateur@groupagrica.com"/>
                                <cam:Param cpe="CPE.Settings.Session.SavingPolicy" value="Custom;configurationDetails=true;domainDetails=false;sparePartsDetails=false;generativeProcess=true;manufacturing=false;notExisting=false;notUserChoice=true;productDictionary=true;svgDepth=NONE"/>
                                <cam:Param cpe="CPE.Settings.Session.AllowIncompleteSave" value="true"/>
                                <cam:Param cpe="CPE.Settings.Session.BusinessApp" value=""/>
                                <cam:Param cpe="CPE.Settings.Session.CPName" value="cpOffreMultiple"/>
                                <cam:Param cpe="CPE.Settings.Session.DecimalSeparator" value=","/>
                                <cam:Param cpe="CPE.Settings.Session.DelayedGpOnMassOperations" value="false"/>
                                <cam:Param cpe="CPE.Settings.Session.DragAndDrop" value="false"/>
                                <cam:Param cpe="CPE.Settings.Session.GroupSeparator" value=""/>
                                <cam:Param cpe="CPE.Settings.Session.GroupingSeparator" value=" "/>
                                <cam:Param cpe="CPE.Settings.Session.OpeningMode" value="New"/>
                                <cam:Param cpe="CPE.Settings.Session.PricingMethod[1]" type="com.cameleon.framework.business.basic.PK" value="wsTarificateur/PRGM/pmMultiple"/>
                                <cam:Param cpe="CPE.Settings.Session.Qty" value="1.0"/>
                                <cam:Param cpe="CPE.Settings.Session.SalesMethodName" value="smMultiple"/>
                                <cam:Param cpe="CPE.Settings.Session.UseCurrentQuote" value="false"/>
                                <cam:Param cpe="CPE.Settings.Session.Workspace" value="wsTarificateur"/>
                            </cam:Session>
                        </conf:Settings>
                        <conf:ConfigurableProduct cpe="CPE.wsTarificateur/CP/cpOffreMultiple" name="cpOffreMultiple" wks="wsTarificateur">
                            <conf:Description>Offre Multiples</conf:Description>
                            <conf:SystemProperties isRoot="true"/>
                            <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                            <conf:UnloadedElement/>
                            <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent" name="foInfosSelligent" wks="wsTarificateur">
                                <conf:Description>Infos Selligent</conf:Description>
                                <conf:SystemProperties/>
                                <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_TypeClient" name="Selligent_TypeClient" wks="wsTarificateur">
                                    <conf:Description>Selligent_TypeClient</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>true</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_ModeRecherche" name="Selligent_ModeRecherche" wks="wsTarificateur">
                                    <conf:Description>Selligent_ModeRecherche</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Nom" name="Selligent_Ent_Nom" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Nom</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>HARAS DES VIGNES</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_ChoixOffre" name="Selligent_ChoixOffre" wks="wsTarificateur">
                                    <conf:Description>Selligent_ChoixOffre</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>CCN52</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Institution" name="Selligent_Institution" wks="wsTarificateur">
                                    <conf:Description>Selligent_Institution</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                        <conf:Value>
                                            <conf:textValue>CPCEA</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>CPCEA</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Rue" name="Selligent_Ent_Rue" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Rue</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>22 Rue DE TESSE</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Complt" name="Selligent_Ent_Complt" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Complt</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_CP" name="Selligent_Ent_CP" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_CP</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>78910</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Ville" name="Selligent_Ent_Ville" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Ville</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>TACOIGNIERES</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Civilite" name="Selligent_Ent_Contact_Civilite" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Civilite</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>MONSIEUR</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Prenom" name="Selligent_Ent_Contact_Prenom" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Prenom</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>Erwan</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Nom" name="Selligent_Ent_Contact_Nom" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Nom</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>LE TUTOUR</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Fct" name="Selligent_Ent_Contact_Fct" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Fct</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>dev</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Email" name="Selligent_Ent_Contact_Email" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Email</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>letutour.erwan.externe@groupagrica.com</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Phone" name="Selligent_Ent_Contact_Phone" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Phone</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>0102030405</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_Fax" name="Selligent_Ent_Contact_Fax" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_Fax</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Contact_DateNaiss" name="Selligent_Ent_Contact_DateNaiss" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Contact_DateNaiss</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_Nb_Sal" name="Selligent_Ent_Nb_Sal" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_Nb_Sal</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Tarification" name="Selligent_Tarification" wks="wsTarificateur">
                                    <conf:Description>Selligent_Tarification</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_TypeTarification" name="Selligent_TypeTarification" wks="wsTarificateur">
                                    <conf:Description>Selligent_TypeTarification</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>Collectif</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Contact_DateNaiss" name="Selligent_Indiv_Contact_DateNaiss" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Contact_DateNaiss</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Date" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Civ" name="Selligent_Indiv_Civ" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Civ</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Nom" name="Selligent_Indiv_Nom" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Nom</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Prenom" name="Selligent_Indiv_Prenom" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Prenom</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Rue" name="Selligent_Indiv_Rue" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Rue</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Cplt" name="Selligent_Indiv_Cplt" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Cplt</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_CP" name="Selligent_Indiv_CP" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_CP</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Ville" name="Selligent_Indiv_Ville" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Ville</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Email" name="Selligent_Indiv_Email" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Email</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Tel" name="Selligent_Indiv_Tel" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Tel</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_Mobile" name="Selligent_Indiv_Mobile" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_Mobile</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Indiv_DatNaiss" name="Selligent_Indiv_DatNaiss" wks="wsTarificateur">
                                    <conf:Description>Selligent_Indiv_DatNaiss</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Date" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Ent_SIRET" name="Portail_Ent_SIRET" wks="wsTarificateur">
                                    <conf:Description>Portail_Ent_SIRET</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>753 030 782 00019</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Ent_Code_NAF" name="Portail_Ent_Code_NAF" wks="wsTarificateur">
                                    <conf:Description>Portail_Ent_Code_NAF</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>9319Z</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Ent_IDCC" name="Portail_Ent_IDCC" wks="wsTarificateur">
                                    <conf:Description>Portail_Ent_IDCC</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>7012</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Ent_Convention_Collective" name="Portail_Ent_Convention_Collective" wks="wsTarificateur">
                                    <conf:Description>Portail_Ent_Convention_Collective</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>Centres équestres</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Ent_Contact_Telmobile" name="Portail_Ent_Contact_Telmobile" wks="wsTarificateur">
                                    <conf:Description>Portail_Ent_Contact_Telmobile</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>0601020304</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Ent_CodeVendeur" name="Selligent_Ent_CodeVendeur" wks="wsTarificateur">
                                    <conf:Description>Selligent_Ent_CodeVendeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Distributeur" name="Portail_Distributeur" wks="wsTarificateur">
                                    <conf:Description>Portail_Distributeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>Groupe AGRICA</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Caisse_Regionale" name="Portail_Caisse_Regionale" wks="wsTarificateur">
                                    <conf:Description>Portail_Caisse_Regionale</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>Agence Grands Comptes</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Num_Devis" name="Portail_Num_Devis" wks="wsTarificateur">
                                    <conf:Description>Portail_Num_Devis</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>REC_ECO_2023_75303078200019_0006</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Date_Entretien" name="Portail_Date_Entretien" wks="wsTarificateur">
                                    <conf:Description>Portail_Date_Entretien</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>08/06/2023</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Couv_Actuelle" name="Portail_Couv_Actuelle" wks="wsTarificateur">
                                    <conf:Description>Portail_Couv_Actuelle</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Ent_Forme_juridique" name="Portail_Ent_Forme_juridique" wks="wsTarificateur">
                                    <conf:Description>Portail_Ent_Forme_juridique</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>Société à responsabilité limitée (sans autre indication)</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Produit_Nom" name="Produit_Nom" wks="wsTarificateur">
                                    <conf:Description>Produit_Nom</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                        <conf:Value>
                                            <conf:textValue>Convention Collective Nationale 1952</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>Convention Collective Nationale 1952</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Distributeur_Nom_Vendeur" name="Distributeur_Nom_Vendeur" wks="wsTarificateur">
                                    <conf:Description>Distributeur_Nom_Vendeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>AISC</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Distributeur_Prenom_Vendeur" name="Distributeur_Prenom_Vendeur" wks="wsTarificateur">
                                    <conf:Description>Distributeur_Prenom_Vendeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>admin</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Distributeur_Email_Vendeur" name="Distributeur_Email_Vendeur" wks="wsTarificateur">
                                    <conf:Description>Distributeur_Email_Vendeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>administrateur@groupagrica.com</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Distributeur_Profil_Vendeur" name="Distributeur_Profil_Vendeur" wks="wsTarificateur">
                                    <conf:Description>Distributeur_Profil_Vendeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>ADMINISTRATEUR</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Distributeur_Contact_Mobile" name="Distributeur_Contact_Mobile" wks="wsTarificateur">
                                    <conf:Description>Distributeur_Contact_Mobile</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>0612234567</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Distributeur_Contact_Phone" name="Distributeur_Contact_Phone" wks="wsTarificateur">
                                    <conf:Description>Distributeur_Contact_Phone</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>0123456789</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Prospect_Ent_Pays" name="Prospect_Ent_Pays" wks="wsTarificateur">
                                    <conf:Description>Prospect_Ent_Pays</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>France</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Prospect_Ent_SiretRattaches_Formate" name="Prospect_Ent_SiretRattaches_Formate" wks="wsTarificateur">
                                    <conf:Description>Prospect_Ent_SiretRattaches_Formate</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="LongText" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Prospect_Ent_Contact_Mobile" name="Prospect_Ent_Contact_Mobile" wks="wsTarificateur">
                                    <conf:Description>Prospect_Ent_Contact_Mobile</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Portail_Code_Vendeur" name="Portail_Code_Vendeur" wks="wsTarificateur">
                                    <conf:Description>Portail_Code_Vendeur</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                        <conf:Value>
                                            <conf:textValue>yk51364</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Code_Client_Agrica" name="Code_Client_Agrica" wks="wsTarificateur">
                                    <conf:Description>Code_Client_Agrica</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foInfosSelligent.FP/Selligent_Matricule" name="Selligent_Matricule" wks="wsTarificateur">
                                    <conf:Description>Selligent_Matricule</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                            </conf:Form>
                            <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple" name="foStandardMultiple" wks="wsTarificateur">
                                <conf:Description>foStandardMultiple</conf:Description>
                                <conf:SystemProperties/>
                                <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple.FP/fpTypeClient" name="fpTypeClient" wks="wsTarificateur">
                                    <conf:Description>fpTypeClient</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="false" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>Collectif</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple.FP/fpModeRecherche" name="fpModeRecherche" wks="wsTarificateur">
                                    <conf:Description>fpModeRecherche</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="false" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple.FP/fpInstitution" name="fpInstitution" wks="wsTarificateur">
                                    <conf:Description>fpInstitution</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="false" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>CPCEA</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple.FP/fpMarche" name="fpMarche" wks="wsTarificateur">
                                    <conf:Description>fpMarche</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Object" valuationType="Single"/>
                                    <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="false" computed="false" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false"/>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/BVAL/Multiple</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple.FP/fpOffre" name="fpOffre" wks="wsTarificateur">
                                    <conf:Description>fpOffre</conf:Description>
                                    <conf:Layout name="TextFieldValueSelector"/>
                                    <conf:SystemProperties type="Object" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                        <conf:Value>
                                            <conf:pkValue>wsTarificateur/SI/siCCN52</conf:pkValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/SI/siCCN52</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                                <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/FO/foStandardMultiple.FP/fpHiddenRMO" name="fpHiddenRMO" wks="wsTarificateur">
                                    <conf:Description>fpHiddenRMO</conf:Description>
                                    <conf:Layout name="ComboBoxValueSelector"/>
                                    <conf:SystemProperties type="Text" valuationType="Single"/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                    <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                        <conf:Value>
                                            <conf:textValue>TEST</conf:textValue>
                                        </conf:Value>
                                    </conf:SingleValuation>
                                    <conf:DefaultValuation>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>TEST</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:DefaultValuation>
                                </conf:FormProperty>
                            </conf:Form>
                            <conf:CPNode cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52" name="cpTarificationCCN52" wks="wsTarificateur">
                                <conf:Description>Tarificateur CCN52</conf:Description>
                                <conf:SystemProperties isRoot="false"/>
                                <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                <conf:UnloadedElement/>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52" name="foTarificationCCN52" wks="wsTarificateur">
                                    <conf:Description>Convention Collective Nationale de 1952</conf:Description>
                                    <conf:SystemProperties/>
                                    <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpEntCCN52" name="fpEntCCN52" wks="wsTarificateur">
                                        <conf:Description>Entreprise relevant de la Convention Collective Nationale de 1952 ?</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Object" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/BVAL/true</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpHiddenBlock" name="fpHiddenBlock" wks="wsTarificateur">
                                        <conf:Description>fpHiddenBlock</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Text" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>test</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:textValue>test</conf:textValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpLocalisation" name="fpLocalisation" wks="wsTarificateur">
                                        <conf:Description>Localisation</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Object" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/BVAL/bvalHorsAlsace</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:pkValue>wsTarificateur/BVAL/bvalHorsAlsace</conf:pkValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpFederation" name="fpFederation" wks="wsTarificateur">
                                        <conf:Description>De quelle fédération relève l’entreprise ?</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Object" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="false" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/BVAL/bvalFedNatioSynd</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpHiddenValLocalFed" name="fpHiddenValLocalFed" wks="wsTarificateur">
                                        <conf:Description>fpHiddenValLocalFed</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Text" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:textValue>CCN FNSEA</conf:textValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:textValue>CCN FNSEA</conf:textValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpSpecialisation" name="fpSpecialisation" wks="wsTarificateur">
                                        <conf:Description>Quelle est la spécialisation de l’entreprise ?</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Object" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="false" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/BVAL/bvalHaras</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpNiveauGarantie" name="fpNiveauGarantie" wks="wsTarificateur">
                                        <conf:Description>Niveau de garantie que l’entreprise souhaite apporter à ses salariés</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Object" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:pkValue>wsTarificateur/BVAL/ConformeLegale</conf:pkValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpNombreSalaries" name="fpNombreSalaries" wks="wsTarificateur">
                                        <conf:Description>Effectif à assurer</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="10.0">10.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpMasseSalarialeTA" name="fpMasseSalarialeTA" wks="wsTarificateur">
                                        <conf:Description>Masse Salariale TA</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="2.0">2.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpMasseSalarialeTARound" name="fpMasseSalarialeTARound" wks="wsTarificateur">
                                        <conf:Description>fpMasseSalarialeTARound</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="2.0">2.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:numericValue>2.0</conf:numericValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpMasseSalarialeTB" name="fpMasseSalarialeTB" wks="wsTarificateur">
                                        <conf:Description>Masse Salariale TB</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="5.0">5.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:numericValue>0.0</conf:numericValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpMasseSalarialeTBRound" name="fpMasseSalarialeTBRound" wks="wsTarificateur">
                                        <conf:Description>fpMasseSalarialeTARound</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="5.0">5.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:numericValue>5.0</conf:numericValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpMasseSalarialeTC" name="fpMasseSalarialeTC" wks="wsTarificateur">
                                        <conf:Description>Masse Salariale TC</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="true">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="3.0">3.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:numericValue>0.0</conf:numericValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpMasseSalarialeTCRound" name="fpMasseSalarialeTCRound" wks="wsTarificateur">
                                        <conf:Description>fpMasseSalarialeTARound</conf:Description>
                                        <conf:Layout name="TextFieldValueSelector"/>
                                        <conf:SystemProperties type="Numerical" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:convertedNumericValue refValue="3.0">3.0</conf:convertedNumericValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:numericValue>3.0</conf:numericValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                    <conf:FormProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpTarificationCCN52.wsTarificateur/FO/foTarificationCCN52.FP/fpDateEffet" name="fpDateEffet" wks="wsTarificateur">
                                        <conf:Description>Date d’effet du contrat</conf:Description>
                                        <conf:Layout name="ComboBoxValueSelector"/>
                                        <conf:SystemProperties type="Date" valuationType="Single"/>
                                        <conf:Status completed="true" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:ValueStatus completed="true" computed="true" exist="true" failed="false" immediatePropagation="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                        <conf:QuantityStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:CommentStatus completed="false" computed="false" exist="false" failed="false" immediatePropagation="false" mandatory="false" unrecommended="false" updateable="false" visible="false"/>
                                        <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                            <conf:Value>
                                                <conf:dateValue>2023-07-01T00:00:00.000+02:00</conf:dateValue>
                                            </conf:Value>
                                        </conf:SingleValuation>
                                        <conf:DefaultValuation>
                                            <conf:SingleValuation isCommentUserChoice="false" isQtyUserChoice="false" isValueUserChoice="false">
                                                <conf:Value>
                                                    <conf:dateValue>2023-07-01T00:00:00.000+02:00</conf:dateValue>
                                                </conf:Value>
                                            </conf:SingleValuation>
                                        </conf:DefaultValuation>
                                    </conf:FormProperty>
                                </conf:Form>
                            </conf:CPNode>
                            <conf:CPNode cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage" name="cpCadrePaysage" wks="wsTarificateur">
                                <conf:Description>Parcours</conf:Description>
                                <conf:SystemProperties isRoot="false"/>
                                <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                <conf:UnloadedElement/>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage.wsTarificateur/FO/foCadrePaysage" name="foCadrePaysage" wks="wsTarificateur">
                                    <conf:Description>Accord TAM et Cadres du Paysage</conf:Description>
                                    <conf:SystemProperties/>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                </conf:Form>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage.wsTarificateur/FO/foSalCadre" name="foSalCadre" wks="wsTarificateur">
                                    <conf:Description>Effectif et masse salariale des cadres</conf:Description>
                                    <conf:SystemProperties instanceCount="1">
                                        <conf:UserType name="utFoNestedDescrOff">
                                            <conf:Description>utFoNestedDescrOff</conf:Description>
                                        </conf:UserType>
                                    </conf:SystemProperties>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage.wsTarificateur/FO/foSalCadre[1]" name="foSalCadre" wks="wsTarificateur">
                                        <conf:Description>Effectif et masse salariale des cadres</conf:Description>
                                        <conf:SystemProperties>
                                            <conf:UserType name="utFoNestedDescrOff">
                                                <conf:Description>utFoNestedDescrOff</conf:Description>
                                            </conf:UserType>
                                        </conf:SystemProperties>
                                        <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    </conf:Form>
                                </conf:Form>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage.wsTarificateur/FO/foSalTAM" name="foSalTAM" wks="wsTarificateur">
                                    <conf:Description>Effectif et masse salariale des TAM</conf:Description>
                                    <conf:SystemProperties instanceCount="1">
                                        <conf:UserType name="utFoNestedDescrOff">
                                            <conf:Description>utFoNestedDescrOff</conf:Description>
                                        </conf:UserType>
                                    </conf:SystemProperties>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage.wsTarificateur/FO/foSalTAM[1]" name="foSalTAM" wks="wsTarificateur">
                                        <conf:Description>Effectif et masse salariale des TAM</conf:Description>
                                        <conf:SystemProperties>
                                            <conf:UserType name="utFoNestedDescrOff">
                                                <conf:Description>utFoNestedDescrOff</conf:Description>
                                            </conf:UserType>
                                        </conf:SystemProperties>
                                        <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="false" unrecommended="false" updateable="true" visible="false"/>
                                    </conf:Form>
                                </conf:Form>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCadrePaysage.wsTarificateur/FO/foSuiteTarification" name="foSuiteTarification" wks="wsTarificateur">
                                    <conf:Description>foSuiteTarification</conf:Description>
                                    <conf:SystemProperties>
                                        <conf:UserType name="ustFoDescrOff">
                                            <conf:Description>ustFoDescrOff</conf:Description>
                                        </conf:UserType>
                                    </conf:SystemProperties>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                </conf:Form>
                            </conf:CPNode>
                            <conf:CPNode cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpChoixNiveauxCadrePaysage" name="cpChoixNiveauxCadrePaysage" wks="wsTarificateur">
                                <conf:Description>cpChoixNiveauxCadrePaysage</conf:Description>
                                <conf:SystemProperties isRoot="false"/>
                                <conf:Status completed="false" computed="false" exist="true" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                <conf:UnloadedElement>
                                    <conf:CPE>CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpChoixNiveauxCadrePaysage.wsTarificateur/CP/cpMultiNiveauxPaysageCadre</conf:CPE>
                                </conf:UnloadedElement>
                            </conf:CPNode>
                            <conf:CPNode cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCCNPaysageNonCadres" name="cpCCNPaysageNonCadres" wks="wsTarificateur">
                                <conf:Description>Parcours</conf:Description>
                                <conf:SystemProperties isRoot="false"/>
                                <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                <conf:UnloadedElement/>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCCNPaysageNonCadres.wsTarificateur/FO/foTarificationCCNPaysageNonCadres" name="foTarificationCCNPaysageNonCadres" wks="wsTarificateur">
                                    <conf:Description>CCN des entreprises du Paysage Ouvriers et Employés</conf:Description>
                                    <conf:SystemProperties/>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="true"/>
                                </conf:Form>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCCNPaysageNonCadres.wsTarificateur/FO/foTarificationCCNPaysageNonCadresEffectif" name="foTarificationCCNPaysageNonCadresEffectif" wks="wsTarificateur">
                                    <conf:Description>Effectif et masse salariale annuelle des salariés non cadres</conf:Description>
                                    <conf:SystemProperties instanceCount="1">
                                        <conf:UserType name="utFoNestedDescrOff">
                                            <conf:Description>utFoNestedDescrOff</conf:Description>
                                        </conf:UserType>
                                    </conf:SystemProperties>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCCNPaysageNonCadres.wsTarificateur/FO/foTarificationCCNPaysageNonCadresEffectif[1]" name="foTarificationCCNPaysageNonCadresEffectif" wks="wsTarificateur">
                                        <conf:Description>Effectif et masse salariale annuelle des salariés non cadres</conf:Description>
                                        <conf:SystemProperties>
                                            <conf:UserType name="utFoNestedDescrOff">
                                                <conf:Description>utFoNestedDescrOff</conf:Description>
                                            </conf:UserType>
                                        </conf:SystemProperties>
                                        <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                    </conf:Form>
                                </conf:Form>
                                <conf:Form cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpCCNPaysageNonCadres.wsTarificateur/FO/foTarificationCCNPaysageNonCadres2" name="foTarificationCCNPaysageNonCadres2" wks="wsTarificateur">
                                    <conf:Description>foTarificationCCNPaysageNonCadres2</conf:Description>
                                    <conf:SystemProperties>
                                        <conf:UserType name="ustFoDescrOff">
                                            <conf:Description>ustFoDescrOff</conf:Description>
                                        </conf:UserType>
                                    </conf:SystemProperties>
                                    <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                </conf:Form>
                            </conf:CPNode>
                            <conf:CPNode cpe="CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpChoixNiveauxCCNPaysageNonCadres" name="cpChoixNiveauxCCNPaysageNonCadres" wks="wsTarificateur">
                                <conf:Description>cpChoixNiveauxCCNPaysageNonCadres</conf:Description>
                                <conf:SystemProperties isRoot="false"/>
                                <conf:Status completed="false" computed="false" exist="false" failed="false" mandatory="true" unrecommended="false" updateable="true" visible="false"/>
                                <conf:UnloadedElement>
                                    <conf:CPE>CPE.wsTarificateur/CP/cpOffreMultiple.wsTarificateur/CP/cpChoixNiveauxCCNPaysageNonCadres.wsTarificateur/CP/cpMultiNiveauxCCNPaysageNonCadres</conf:CPE>
                                </conf:UnloadedElement>
                            </conf:CPNode>
                            <conf:GenerativeProcess>
                                <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple" cpeOfItem="" exists="true" name="cpOffreMultiple" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                    <conf:Description/>
                                    <conf:Children>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Standard" cpeOfItem="CPE.wsTarificateur/SI/Standard" exists="true" name="Standard" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Standard</conf:Description>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Institution" cpeOfItem="CPE.wsTarificateur/SI/Institution" exists="true" name="Institution" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Institution : CPCEA</conf:Description>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Offre" cpeOfItem="CPE.wsTarificateur/SI/Offre" exists="true" name="Offre" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Offre : Convention Collective Nationale de 1952</conf:Description>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Marche" cpeOfItem="" exists="true" name="Marche" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Blank" cpeOfItem="" exists="true" name="Blank" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance" cpeOfItem="CPE.wsTarificateur/SI/Prévoyance" exists="true" name="Prévoyance" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Prévoyance</conf:Description>
                                            <conf:Children>
                                                <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA" cpeOfItem="CPE.wsTarificateur/SI/Tranche A" exists="true" name="Tranche A" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                                    <conf:Description>Tranche A</conf:Description>
                                                    <conf:MatrixResults>
                                                        <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="1.48">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>1.48</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.002466666666666667">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>0.002466666666666667</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                        </conf:ProcessMatrixResult>
                                                    </conf:MatrixResults>
                                                </conf:ItemSalesBreakdownLine>
                                                <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC" cpeOfItem="CPE.wsTarificateur/SI/&quot;Tranche B/C&quot;" exists="true" name="Tranche B/C" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                                    <conf:Description>Tranche B/C</conf:Description>
                                                    <conf:MatrixResults>
                                                        <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="2.65">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>2.65</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.01766666666666667">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>0.01766666666666667</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                        </conf:ProcessMatrixResult>
                                                    </conf:MatrixResults>
                                                </conf:ItemSalesBreakdownLine>
                                            </conf:Children>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Blank2" cpeOfItem="" exists="true" name="Blank2" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite" cpeOfItem="CPE.wsTarificateur/SI/Retraite Supplémentaire" exists="true" name="Retraite Supplémentaire" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Retraite Supplémentaire</conf:Description>
                                            <conf:Children>
                                                <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA" cpeOfItem="CPE.wsTarificateur/SI/Tranche A" exists="true" name="Tranche A" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                                    <conf:Description>Tranche A</conf:Description>
                                                    <conf:MatrixResults>
                                                        <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="2.5">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>2.5</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.004166666666666668">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>0.004166666666666668</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                        </conf:ProcessMatrixResult>
                                                    </conf:MatrixResults>
                                                </conf:ItemSalesBreakdownLine>
                                                <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC" cpeOfItem="CPE.wsTarificateur/SI/&quot;Tranche B/C&quot;" exists="true" name="Tranche B/C" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                                    <conf:Description>Tranche B/C</conf:Description>
                                                    <conf:MatrixResults>
                                                        <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="0.5">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>0.5</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                            <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.003333333333333334">
                                                                <conf:PropertyValue>
                                                                    <conf:numericValue>0.003333333333333334</conf:numericValue>
                                                                </conf:PropertyValue>
                                                            </conf:ResultValue>
                                                        </conf:ProcessMatrixResult>
                                                    </conf:MatrixResults>
                                                </conf:ItemSalesBreakdownLine>
                                            </conf:Children>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Blank3" cpeOfItem="" exists="true" name="Blank3" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante" cpeOfItem="CPE.wsTarificateur/SI/Santé" exists="true" name="Santé" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Santé</conf:Description>
                                            <conf:MatrixResults>
                                                <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                    <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="129.0">
                                                        <conf:PropertyValue>
                                                            <conf:numericValue>129.0</conf:numericValue>
                                                        </conf:PropertyValue>
                                                    </conf:ResultValue>
                                                    <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="1290.0">
                                                        <conf:PropertyValue>
                                                            <conf:numericValue>1290.0</conf:numericValue>
                                                        </conf:PropertyValue>
                                                    </conf:ResultValue>
                                                </conf:ProcessMatrixResult>
                                            </conf:MatrixResults>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/blank4" cpeOfItem="" exists="true" name="blank4" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Total" cpeOfItem="CPE.wsTarificateur/SI/Total" exists="true" name="Total" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                            <conf:Description>Total</conf:Description>
                                            <conf:MatrixResults>
                                                <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Total.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                    <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Total.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="1290.027633333333">
                                                        <conf:PropertyValue>
                                                            <conf:numericValue>1290.027633333333</conf:numericValue>
                                                        </conf:PropertyValue>
                                                    </conf:ResultValue>
                                                </conf:ProcessMatrixResult>
                                            </conf:MatrixResults>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sblBlankTextCCNPAYNCAD" cpeOfItem="" exists="true" name="sblBlankTextCCNPAYNCAD" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent" cpeOfItem="" exists="true" name="sigSelligent" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="false" wks="wsTarificateur">
                                            <conf:Description/>
                                            <conf:Sig>
                                                <conf:SIGLineResult sequentialNumber="1">
                                                    <conf:BusinessPropertySets>
                                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent" name="bpsSelligent" wks="wsTarificateur">
                                                            <conf:BusinessProperties>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_nom" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_nom" name="Selligent_Ent_nom" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>HARAS DES VIGNES</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Rue" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Rue" name="Selligent_Ent_Rue" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>22 Rue DE TESSE</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Complt" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Complt" name="Selligent_Ent_Complt" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_CP" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_CP" name="Selligent_Ent_CP" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>78910</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Ville" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Ville" name="Selligent_Ent_Ville" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>TACOIGNIERES</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Civilite" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Civilite" name="Selligent_Ent_Contact_Civilite" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>MONSIEUR</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Fct" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Fct" name="Selligent_Ent_Contact_Fct" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>dev</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Nom" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Nom" name="Selligent_Ent_Contact_Nom" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>LE TUTOUR</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Prenom" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Prenom" name="Selligent_Ent_Contact_Prenom" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Erwan</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Phone" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Phone" name="Selligent_Ent_Contact_Phone" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>0102030405</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Email" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Email" name="Selligent_Ent_Contact_Email" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>letutour.erwan.externe@groupagrica.com</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Produit_Nom" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Produit_Nom" name="Produit_Nom" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Convention Collective Nationale 1952</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Institution" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Institution" name="Selligent_Institution" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>CPCEA</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_ChoixOffre" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_ChoixOffre" name="Selligent_ChoixOffre" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>CCN52</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Fax" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Fax" name="Selligent_Ent_Contact_Fax" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_DateNaiss" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_DateNaiss" name="Selligent_Ent_Contact_DateNaiss" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Nb_Sal" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Nb_Sal" name="Selligent_Ent_Nb_Sal" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_CodeVendeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_CodeVendeur" name="Selligent_Ent_CodeVendeur" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Selligent_Matricule" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Matricule" name="Selligent_Matricule" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigSelligent.salesInformation.result[1].wsTarificateur/BPS/bpsSelligent.BP/Code_Client_Agrica" cpeDefinition="CPE.wsTarificateur/BPS/bpsSelligent.BP/Code_Client_Agrica" name="Code_Client_Agrica" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                            </conf:BusinessProperties>
                                                        </conf:BusinessPropertySet>
                                                    </conf:BusinessPropertySets>
                                                </conf:SIGLineResult>
                                            </conf:Sig>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur" cpeOfItem="" exists="true" name="sigDistributeur" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="false" wks="wsTarificateur">
                                            <conf:Description/>
                                            <conf:Sig>
                                                <conf:SIGLineResult sequentialNumber="1">
                                                    <conf:BusinessPropertySets>
                                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur" name="bpsDistributeur" wks="wsTarificateur">
                                                            <conf:BusinessProperties>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Nom_Vendeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Nom_Vendeur" name="Distributeur_Nom_Vendeur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>AISC</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Prenom_Vendeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Prenom_Vendeur" name="Distributeur_Prenom_Vendeur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>admin</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Email_Vendeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Email_Vendeur" name="Distributeur_Email_Vendeur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>administrateur@groupagrica.com</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Profil_Vendeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Profil_Vendeur" name="Distributeur_Profil_Vendeur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>ADMINISTRATEUR</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Contact_Mobile" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Contact_Mobile" name="Distributeur_Contact_Mobile" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>0612234567</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigDistributeur.salesInformation.result[1].wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Contact_Phone" cpeDefinition="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Contact_Phone" name="Distributeur_Contact_Phone" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>0123456789</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                            </conf:BusinessProperties>
                                                        </conf:BusinessPropertySet>
                                                    </conf:BusinessPropertySets>
                                                </conf:SIGLineResult>
                                            </conf:Sig>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail" cpeOfItem="" exists="true" name="sigPortail" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="false" wks="wsTarificateur">
                                            <conf:Description/>
                                            <conf:Sig>
                                                <conf:SIGLineResult sequentialNumber="1">
                                                    <conf:BusinessPropertySets>
                                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail" name="bpsPortail" wks="wsTarificateur">
                                                            <conf:BusinessProperties>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_SIRET" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_SIRET" name="Portail_Ent_SIRET" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>753 030 782 00019</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Code_NAF" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Code_NAF" name="Portail_Ent_Code_NAF" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>9319Z</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Forme_juridique" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Forme_juridique" name="Portail_Ent_Forme_juridique" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Société à responsabilité limitée (sans autre indication)</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Distributeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Distributeur" name="Portail_Distributeur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Groupe AGRICA</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Caisse_Regionale" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Caisse_Regionale" name="Portail_Caisse_Regionale" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Agence Grands Comptes</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Code_Vendeur" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Code_Vendeur" name="Portail_Code_Vendeur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>yk51364</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_IDCC" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_IDCC" name="Portail_Ent_IDCC" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>7012</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Num_Devis" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Num_Devis" name="Portail_Num_Devis" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>REC_ECO_2023_75303078200019_0006</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Date_Entretien" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Date_Entretien" name="Portail_Date_Entretien" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>08/06/2023</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Couv_Actuelle" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Couv_Actuelle" name="Portail_Couv_Actuelle" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Contact_Telmobile" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Contact_Telmobile" name="Portail_Ent_Contact_Telmobile" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>0601020304</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigPortail.salesInformation.result[1].wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Convention_Collective" cpeDefinition="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Convention_Collective" name="Portail_Ent_Convention_Collective" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Centres équestres</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                            </conf:BusinessProperties>
                                                        </conf:BusinessPropertySet>
                                                    </conf:BusinessPropertySets>
                                                </conf:SIGLineResult>
                                            </conf:Sig>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect" cpeOfItem="" exists="true" name="sigProspect" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="false" wks="wsTarificateur">
                                            <conf:Description/>
                                            <conf:Sig>
                                                <conf:SIGLineResult sequentialNumber="1">
                                                    <conf:BusinessPropertySets>
                                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect.salesInformation.result[1].wsTarificateur/BPS/bpsProspect" cpeDefinition="CPE.wsTarificateur/BPS/bpsProspect" name="bpsProspect" wks="wsTarificateur">
                                                            <conf:BusinessProperties>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect.salesInformation.result[1].wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Pays" cpeDefinition="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Pays" name="Prospect_Ent_Pays" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>France</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect.salesInformation.result[1].wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_SiretRattaches_Formate" cpeDefinition="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_SiretRattaches_Formate" name="Prospect_Ent_SiretRattaches_Formate" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect.salesInformation.result[1].wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Contact_Mobile" cpeDefinition="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Contact_Mobile" name="Prospect_Ent_Contact_Mobile" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect.salesInformation.result[1].wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Code_Nature_Juridique" cpeDefinition="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Code_Nature_Juridique" name="Prospect_Ent_Code_Nature_Juridique" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>5499</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigProspect.salesInformation.result[1].wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Date_Creation_Entreprise" cpeDefinition="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Date_Creation_Entreprise" name="Prospect_Ent_Date_Creation_Entreprise" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>30/07/2012</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                            </conf:BusinessProperties>
                                                        </conf:BusinessPropertySet>
                                                    </conf:BusinessPropertySets>
                                                </conf:SIGLineResult>
                                            </conf:Sig>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre" cpeOfItem="" exists="true" name="sigOffre" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="false" wks="wsTarificateur">
                                            <conf:Description/>
                                            <conf:Sig>
                                                <conf:SIGLineResult sequentialNumber="1">
                                                    <conf:BusinessPropertySets>
                                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre" name="bpsOffre" wks="wsTarificateur">
                                                            <conf:BusinessProperties>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Type" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Type" name="Offre_Type" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Collective</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Date_Effet" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Date_Effet" name="Offre_Date_Effet" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>2023-07-01 00:00:00</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Salaire_Ens_Personnel" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Salaire_Ens_Personnel" name="Offre_Salaire_Ens_Personnel" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:numericValue>0.0</conf:numericValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Salaire_Cadres" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Salaire_Cadres" name="Offre_Salaire_Cadres" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:numericValue>0.0</conf:numericValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Effectif_Ens_Personnel" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Effectif_Ens_Personnel" name="Offre_Effectif_Ens_Personnel" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:integerValue>10</conf:integerValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Effectif_Cadre" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Effectif_Cadre" name="Offre_Effectif_Cadre" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:integerValue>0</conf:integerValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Souscrit_Niveau1" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Souscrit_Niveau1" name="Code_Produit_Souscrit_Niveau1" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>CCN52</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Souscrit_Niveau1" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Souscrit_Niveau1" name="Libelle_Produit_Souscrit_Niveau1" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Convention Collective Nationale de 1952</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Souscrit_Niveau2" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Souscrit_Niveau2" name="Code_Produit_Souscrit_Niveau2" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>SOCLE</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Souscrit_Niveau2" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Souscrit_Niveau2" name="Libelle_Produit_Souscrit_Niveau2" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:longTextValue>Garantie renforcée</conf:longTextValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Gestionnaire_Niveau1" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Gestionnaire_Niveau1" name="Code_Produit_Gestionnaire_Niveau1" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>CCN52</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Gestionnaire_Niveau1" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Gestionnaire_Niveau1" name="Libelle_Produit_Gestionnaire_Niveau1" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Convention Collective Nationale de 1952</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Gestionnaire_Niveau2" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Gestionnaire_Niveau2" name="Code_Produit_Gestionnaire_Niveau2" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>SOCLE</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Gestionnaire_Niveau2" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Gestionnaire_Niveau2" name="Libelle_Produit_Gestionnaire_Niveau2" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:longTextValue>Garantie renforcée</conf:longTextValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Marche" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Marche" name="Offre_Marche" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>Prévoyance / Santé / Epargne Retraite</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Regime" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Regime" name="Offre_Regime" wks="wsTarificateur">
                                                                    <conf:Value/>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Date_Creation" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Date_Creation" name="Offre_Date_Creation" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>2023-06-08 09:36:28</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Montant_Cotisation_Produits" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Montant_Cotisation_Produits" name="Offre_Montant_Cotisation_Produits" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>0.02013333333333334;0.007500000000000002;1290</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Offre_Montant_Cotisation_Total" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Montant_Cotisation_Total" name="Offre_Montant_Cotisation_Total" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>1290.027633333333</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Objet" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Objet" name="Code_Objet" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>54</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Accord" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Accord" name="Code_Accord" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>15</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigOffre.salesInformation.result[1].wsTarificateur/BPS/bpsOffre.BP/Code_Secteur" cpeDefinition="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Secteur" name="Code_Secteur" wks="wsTarificateur">
                                                                    <conf:Value>
                                                                        <conf:textValue>1</conf:textValue>
                                                                    </conf:Value>
                                                                </conf:SingleBusinessProperty>
                                                            </conf:BusinessProperties>
                                                        </conf:BusinessPropertySet>
                                                    </conf:BusinessPropertySets>
                                                </conf:SIGLineResult>
                                            </conf:Sig>
                                        </conf:ItemSalesBreakdownLine>
                                        <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sigMultiple" cpeOfItem="" exists="true" name="sigMultiple" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="false" wks="wsTarificateur">
                                            <conf:Description/>
                                        </conf:ItemSalesBreakdownLine>
                                    </conf:Children>
                                </conf:ItemSalesBreakdownLine>
                            </conf:GenerativeProcess>
                        </conf:ConfigurableProduct>
                        <conf:ProductDictionary>
                            <conf:BusinessPropertySetDefinitions>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsOffre" name="bpsOffre" visible="true" wks="wsTarificateur">
                                    <conf:Description>bpsOffre</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Type" name="Offre_Type" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Type</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Date_Effet" name="Offre_Date_Effet" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Date_Effet</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Salaire_Ens_Personnel" name="Offre_Salaire_Ens_Personnel" system="false" type="ConvertedNumerical" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Salaire_Ens_Personnel</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Salaire_Cadres" name="Offre_Salaire_Cadres" system="false" type="ConvertedNumerical" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Salaire_Cadres</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Effectif_Ens_Personnel" name="Offre_Effectif_Ens_Personnel" system="false" type="Integer" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Effectif_Ens_Personnel</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Effectif_Cadre" name="Offre_Effectif_Cadre" system="false" type="Integer" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Effectif_Cadre</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Souscrit_Niveau1" name="Code_Produit_Souscrit_Niveau1" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Produit_Souscrit_Niveau1</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Souscrit_Niveau1" name="Libelle_Produit_Souscrit_Niveau1" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Libelle_Produit_Souscrit_Niveau1</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Souscrit_Niveau2" name="Code_Produit_Souscrit_Niveau2" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Produit_Souscrit_Niveau2</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Souscrit_Niveau2" name="Libelle_Produit_Souscrit_Niveau2" system="false" type="LongText" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Libelle_Produit_Souscrit_Niveau2</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Gestionnaire_Niveau1" name="Code_Produit_Gestionnaire_Niveau1" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Produit_Gestionnaire_Niveau1</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Gestionnaire_Niveau1" name="Libelle_Produit_Gestionnaire_Niveau1" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Libelle_Produit_Gestionnaire_Niveau1</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Produit_Gestionnaire_Niveau2" name="Code_Produit_Gestionnaire_Niveau2" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Produit_Gestionnaire_Niveau2</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Libelle_Produit_Gestionnaire_Niveau2" name="Libelle_Produit_Gestionnaire_Niveau2" system="false" type="LongText" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Libelle_Produit_Gestionnaire_Niveau2</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Marche" name="Offre_Marche" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Marche</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Regime" name="Offre_Regime" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Regime</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Date_Creation" name="Offre_Date_Creation" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Date_Creation</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Montant_Cotisation_Produits" name="Offre_Montant_Cotisation_Produits" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Montant_Cotisation_Produits</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Offre_Montant_Cotisation_Total" name="Offre_Montant_Cotisation_Total" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Offre_Montant_Cotisation_Total</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Objet" name="Code_Objet" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Objet</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Accord" name="Code_Accord" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Accord</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/Code_Secteur" name="Code_Secteur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Secteur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/bpCurrentYear" name="bpCurrentYear" system="false" type="Integer" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>bpCurrentYear</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsOffre.BP/bpCurrentPmss" name="bpCurrentPmss" system="false" type="Integer" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>bpCurrentPmss</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsSelligent" name="bpsSelligent" visible="true" wks="wsTarificateur">
                                    <conf:Description>bpsSelligent</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_nom" name="Selligent_Ent_nom" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_nom</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Rue" name="Selligent_Ent_Rue" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Rue</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Complt" name="Selligent_Ent_Complt" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Complt</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_CP" name="Selligent_Ent_CP" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_CP</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Ville" name="Selligent_Ent_Ville" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Ville</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Civilite" name="Selligent_Ent_Contact_Civilite" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Civilite</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Fct" name="Selligent_Ent_Contact_Fct" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Fct</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Nom" name="Selligent_Ent_Contact_Nom" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Nom</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Prenom" name="Selligent_Ent_Contact_Prenom" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Prenom</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Phone" name="Selligent_Ent_Contact_Phone" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Phone</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Email" name="Selligent_Ent_Contact_Email" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Email</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Produit_Nom" name="Produit_Nom" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Produit_Nom</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Institution" name="Selligent_Institution" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Institution</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_ChoixOffre" name="Selligent_ChoixOffre" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_ChoixOffre</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_Fax" name="Selligent_Ent_Contact_Fax" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_Fax</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Contact_DateNaiss" name="Selligent_Ent_Contact_DateNaiss" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Contact_DateNaiss</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_Nb_Sal" name="Selligent_Ent_Nb_Sal" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_Nb_Sal</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Ent_CodeVendeur" name="Selligent_Ent_CodeVendeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Ent_CodeVendeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Matricule" name="Selligent_Matricule" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Matricule</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Code_Client_Agrica" name="Code_Client_Agrica" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Code_Client_Agrica</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_Tarification" name="Selligent_Tarification" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_Tarification</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsSelligent.BP/Selligent_TypTarification" name="Selligent_TypTarification" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Selligent_TypTarification</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsPortail" name="bpsPortail" visible="true" wks="wsTarificateur">
                                    <conf:Description>bpsPortail</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_SIRET" name="Portail_Ent_SIRET" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Ent_SIRET</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Code_NAF" name="Portail_Ent_Code_NAF" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Ent_Code_NAF</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Forme_juridique" name="Portail_Ent_Forme_juridique" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Ent_Forme_juridique</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Distributeur" name="Portail_Distributeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Distributeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Caisse_Regionale" name="Portail_Caisse_Regionale" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Caisse_Regionale</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Code_Vendeur" name="Portail_Code_Vendeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Code_Vendeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_IDCC" name="Portail_Ent_IDCC" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Ent_IDCC</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Num_Devis" name="Portail_Num_Devis" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Num_Devis</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Date_Entretien" name="Portail_Date_Entretien" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Date_Entretien</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Couv_Actuelle" name="Portail_Couv_Actuelle" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Couv_Actuelle</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Contact_Telmobile" name="Portail_Ent_Contact_Telmobile" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Ent_Contact_Telmobile</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsPortail.BP/Portail_Ent_Convention_Collective" name="Portail_Ent_Convention_Collective" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Portail_Ent_Convention_Collective</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsProspect" name="bpsProspect" visible="true" wks="wsTarificateur">
                                    <conf:Description>bpsProspect</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Pays" name="Prospect_Ent_Pays" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Prospect_Ent_Pays</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_SiretRattaches_Formate" name="Prospect_Ent_SiretRattaches_Formate" system="false" type="LongText" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Prospect_Ent_SiretRattaches_Formate</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Contact_Mobile" name="Prospect_Ent_Contact_Mobile" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Prospect_Ent_Contact_Mobile</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Code_Nature_Juridique" name="Prospect_Ent_Code_Nature_Juridique" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Prospect_Ent_Code_Nature_Juridique</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsProspect.BP/Prospect_Ent_Date_Creation_Entreprise" name="Prospect_Ent_Date_Creation_Entreprise" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Prospect_Ent_Date_Creation_Entreprise</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsCriteresOffres" name="bpsCriteresOffres" visible="true" wks="wsTarificateur">
                                    <conf:Description>Criteres du nom de l'offre</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsCriteresOffres.BP/aNomOffre" name="aNomOffre" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Nom de l'offre</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsDistributeur" name="bpsDistributeur" visible="true" wks="wsTarificateur">
                                    <conf:Description>bpsDistributeur</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Nom_Vendeur" name="Distributeur_Nom_Vendeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Distributeur_Nom_Vendeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Prenom_Vendeur" name="Distributeur_Prenom_Vendeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Distributeur_Prenom_Vendeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Email_Vendeur" name="Distributeur_Email_Vendeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Distributeur_Email_Vendeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Profil_Vendeur" name="Distributeur_Profil_Vendeur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Distributeur_Profil_Vendeur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Contact_Mobile" name="Distributeur_Contact_Mobile" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Distributeur_Contact_Mobile</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsDistributeur.BP/Distributeur_Contact_Phone" name="Distributeur_Contact_Phone" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>Distributeur_Contact_Phone</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                                <conf:BusinessPropertySetDefinition cpe="CPE.wsTarificateur/BPS/bpsCodesOffres" name="bpsCodesOffres" visible="true" wks="wsTarificateur">
                                    <conf:Description>bpsCodesOffres</conf:Description>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeObjet" name="bpCodeObjet" system="false" type="ConvertedNumerical" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>bpCodeObjet</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeAccordCadre" name="bpCodeAccordCadre" system="false" type="ConvertedNumerical" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>bpCodeAccordCadre</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeAccordNonCadre" name="bpCodeAccordNonCadre" system="false" type="ConvertedNumerical" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>bpCodeAccordNonCadre</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                    <conf:BusinessPropertyDefinition comparable="true" cpe="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeSecteur" name="bpCodeSecteur" system="false" type="Text" unit="" valuationType="Single" visible="true" wks="wsTarificateur">
                                        <conf:Description>bpCodeSecteur</conf:Description>
                                    </conf:BusinessPropertyDefinition>
                                </conf:BusinessPropertySetDefinition>
                            </conf:BusinessPropertySetDefinitions>
                            <conf:StandardItems>
                                <conf:StandardItem cpe="CPE.wsTarificateur/SI/siCCN52" name="siCCN52" wks="wsTarificateur">
                                    <conf:Description>Convention Collective Nationale 52</conf:Description>
                                    <conf:RMO name="Rmo of SI from workspace wsTarificateur named siCCN52" wks="wsTarificateur">
                                        <conf:RMOFileLink file="https://rec-tarificateur.groupagrica.com/cameleonResources/RMGRepository/wsTarificateur/FILE/CCN52/fr_FR/83556_cpcea_ccn52_multi%20marches_bar_Av50.pdf"/>
                                    </conf:RMO>
                                    <conf:BusinessPropertySets>
                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/SI/siCCN52.wsTarificateur/BPS/bpsCodesOffres" cpeDefinition="CPE.wsTarificateur/BPS/bpsCodesOffres" name="bpsCodesOffres" wks="wsTarificateur">
                                            <conf:BusinessProperties>
                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/SI/siCCN52.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeObjet" cpeDefinition="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeObjet" name="bpCodeObjet" wks="wsTarificateur">
                                                    <conf:Value>
                                                        <conf:numericValue>54.0</conf:numericValue>
                                                    </conf:Value>
                                                </conf:SingleBusinessProperty>
                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/SI/siCCN52.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeAccordNonCadre" cpeDefinition="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeAccordNonCadre" name="bpCodeAccordNonCadre" wks="wsTarificateur">
                                                    <conf:Value>
                                                        <conf:numericValue>15.0</conf:numericValue>
                                                    </conf:Value>
                                                </conf:SingleBusinessProperty>
                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/SI/siCCN52.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeSecteur" cpeDefinition="CPE.wsTarificateur/BPS/bpsCodesOffres.BP/bpCodeSecteur" name="bpCodeSecteur" wks="wsTarificateur">
                                                    <conf:Value>
                                                        <conf:textValue>1</conf:textValue>
                                                    </conf:Value>
                                                </conf:SingleBusinessProperty>
                                            </conf:BusinessProperties>
                                        </conf:BusinessPropertySet>
                                        <conf:BusinessPropertySet cpe="CPE.wsTarificateur/SI/siCCN52.wsTarificateur/BPS/bpsCriteresOffres" cpeDefinition="CPE.wsTarificateur/BPS/bpsCriteresOffres" name="bpsCriteresOffres" wks="wsTarificateur">
                                            <conf:BusinessProperties>
                                                <conf:SingleBusinessProperty cpe="CPE.wsTarificateur/SI/siCCN52.wsTarificateur/BPS/bpsCriteresOffres.BP/aNomOffre" cpeDefinition="CPE.wsTarificateur/BPS/bpsCriteresOffres.BP/aNomOffre" name="aNomOffre" wks="wsTarificateur">
                                                    <conf:Value>
                                                        <conf:textValue>CCN52</conf:textValue>
                                                    </conf:Value>
                                                </conf:SingleBusinessProperty>
                                            </conf:BusinessProperties>
                                        </conf:BusinessPropertySet>
                                    </conf:BusinessPropertySets>
                                </conf:StandardItem>
                            </conf:StandardItems>
                            <conf:BusinessValues>
                                <conf:BusinessValue cpe="CPE.wsTarificateur/BVAL/ConformeLegale" name="ConformeLegale" wks="wsTarificateur">
                                    <conf:Description>Conforme aux obligations conventionnelles ou légales</conf:Description>
                                </conf:BusinessValue>
                                <conf:BusinessValue cpe="CPE.wsTarificateur/BVAL/bvalHaras" name="bvalHaras" wks="wsTarificateur">
                                    <conf:Description>HARAS</conf:Description>
                                </conf:BusinessValue>
                                <conf:BusinessValue cpe="CPE.wsTarificateur/BVAL/true" name="true" wks="wsTarificateur">
                                    <conf:Description>Oui</conf:Description>
                                </conf:BusinessValue>
                                <conf:BusinessValue cpe="CPE.wsTarificateur/BVAL/bvalFedNatioSynd" name="bvalFedNatioSynd" wks="wsTarificateur">
                                    <conf:Description>Fédération Nationale des Syndicats d’Exploitants Agricoles</conf:Description>
                                </conf:BusinessValue>
                                <conf:BusinessValue cpe="CPE.wsTarificateur/BVAL/Multiple" name="Multiple" wks="wsTarificateur">
                                    <conf:Description>Prévoyance / Santé / Epargne Retraite</conf:Description>
                                </conf:BusinessValue>
                                <conf:BusinessValue cpe="CPE.wsTarificateur/BVAL/bvalHorsAlsace" name="bvalHorsAlsace" wks="wsTarificateur">
                                    <conf:Description>Hors Alsace-Moselle</conf:Description>
                                </conf:BusinessValue>
                            </conf:BusinessValues>
                        </conf:ProductDictionary>
                    </conf:ConfigurationTree>
                </itemXML>
                			
                <ItemSheet/>
                			
                <ItemQty>1</ItemQty>
                			
                <UnitPrice>0</UnitPrice>
                			
                <ListPrice>0</ListPrice>
                			
                <StdDiscount>0</StdDiscount>
                			
                <DiscPct>0</DiscPct>
                			
                <Discount>0</Discount>
                			
                <NetPrice>0</NetPrice>
                			
                <TotalPrice>0</TotalPrice>
                			
                <TotalListPrice>0</TotalListPrice>
                			
                <ItemDescr/>
                			
                <cartLines>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="2" parent="1" seqNum="1" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Standard" cpeOfItem="CPE.wsTarificateur/SI/Standard" exists="true" name="Standard" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Standard</conf:Description>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="3" parent="1" seqNum="2" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Institution" cpeOfItem="CPE.wsTarificateur/SI/Institution" exists="true" name="Institution" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Institution : CPCEA</conf:Description>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="4" parent="1" seqNum="3" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Offre" cpeOfItem="CPE.wsTarificateur/SI/Offre" exists="true" name="Offre" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Offre : Convention Collective Nationale de 1952</conf:Description>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="5" parent="1" seqNum="4" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Marche" cpeOfItem="" exists="true" name="Marche" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                <conf:Description/>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="6" parent="1" seqNum="5" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Blank" cpeOfItem="" exists="true" name="Blank" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                <conf:Description/>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="7" parent="1" seqNum="6" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance" cpeOfItem="CPE.wsTarificateur/SI/Prévoyance" exists="true" name="Prévoyance" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Prévoyance</conf:Description>
                                <conf:Children>
                                    <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA" cpeOfItem="CPE.wsTarificateur/SI/Tranche A" exists="true" name="Tranche A" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche A</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="1.48">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>1.48</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.002466666666666667">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.002466666666666667</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                    <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC" cpeOfItem="CPE.wsTarificateur/SI/&quot;Tranche B/C&quot;" exists="true" name="Tranche B/C" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche B/C</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="2.65">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>2.65</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.01766666666666667">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.01766666666666667</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                </conf:Children>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        					
                        <cartLines>
                            						
                            <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="8" parent="7" seqNum="7" service="CONF_CCN52" subline="yes" type="CP7">
                                							
                                <itemXML>
                                    <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA" cpeOfItem="CPE.wsTarificateur/SI/Tranche A" exists="true" name="Tranche A" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche A</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="1.48">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>1.48</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.002466666666666667">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.002466666666666667</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                </itemXML>
                                							
                                <ItemSheet/>
                                							
                                <ItemQty>1</ItemQty>
                                							
                                <UnitPrice>1.48</UnitPrice>
                                							
                                <ListPrice>1.48</ListPrice>
                                							
                                <StdDiscount>0</StdDiscount>
                                							
                                <DiscPct>0</DiscPct>
                                							
                                <Discount>0</Discount>
                                							
                                <NetPrice>0</NetPrice>
                                							
                                <TotalPrice>0</TotalPrice>
                                							
                                <TotalListPrice>0</TotalListPrice>
                                							
                                <ItemDescr/>
                                						
                            </cartLine>
                            						
                            <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="9" parent="7" seqNum="8" service="CONF_CCN52" subline="yes" type="CP7">
                                							
                                <itemXML>
                                    <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC" cpeOfItem="CPE.wsTarificateur/SI/&quot;Tranche B/C&quot;" exists="true" name="Tranche B/C" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche B/C</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="2.65">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>2.65</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationPrevoyance.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.01766666666666667">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.01766666666666667</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                </itemXML>
                                							
                                <ItemSheet/>
                                							
                                <ItemQty>1</ItemQty>
                                							
                                <UnitPrice>2.65</UnitPrice>
                                							
                                <ListPrice>2.65</ListPrice>
                                							
                                <StdDiscount>0</StdDiscount>
                                							
                                <DiscPct>0</DiscPct>
                                							
                                <Discount>0</Discount>
                                							
                                <NetPrice>0</NetPrice>
                                							
                                <TotalPrice>0</TotalPrice>
                                							
                                <TotalListPrice>0</TotalListPrice>
                                							
                                <ItemDescr/>
                                						
                            </cartLine>
                            					
                        </cartLines>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="10" parent="1" seqNum="7" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Blank2" cpeOfItem="" exists="true" name="Blank2" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                <conf:Description/>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="11" parent="1" seqNum="8" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite" cpeOfItem="CPE.wsTarificateur/SI/Retraite Supplémentaire" exists="true" name="Retraite Supplémentaire" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Retraite Supplémentaire</conf:Description>
                                <conf:Children>
                                    <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA" cpeOfItem="CPE.wsTarificateur/SI/Tranche A" exists="true" name="Tranche A" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche A</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="2.5">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>2.5</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.004166666666666668">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.004166666666666668</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                    <conf:ItemSalesBreakdownLine cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC" cpeOfItem="CPE.wsTarificateur/SI/&quot;Tranche B/C&quot;" exists="true" name="Tranche B/C" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche B/C</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="0.5">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.5</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.003333333333333334">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.003333333333333334</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                </conf:Children>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        					
                        <cartLines>
                            						
                            <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="12" parent="11" seqNum="9" service="CONF_CCN52" subline="yes" type="CP7">
                                							
                                <itemXML>
                                    <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA" cpeOfItem="CPE.wsTarificateur/SI/Tranche A" exists="true" name="Tranche A" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche A</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="2.5">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>2.5</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheA.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.004166666666666668">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.004166666666666668</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                </itemXML>
                                							
                                <ItemSheet/>
                                							
                                <ItemQty>1</ItemQty>
                                							
                                <UnitPrice>2.5</UnitPrice>
                                							
                                <ListPrice>2.5</ListPrice>
                                							
                                <StdDiscount>0</StdDiscount>
                                							
                                <DiscPct>0</DiscPct>
                                							
                                <Discount>0</Discount>
                                							
                                <NetPrice>0</NetPrice>
                                							
                                <TotalPrice>0</TotalPrice>
                                							
                                <TotalListPrice>0</TotalListPrice>
                                							
                                <ItemDescr/>
                                						
                            </cartLine>
                            						
                            <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="13" parent="11" seqNum="10" service="CONF_CCN52" subline="yes" type="CP7">
                                							
                                <itemXML>
                                    <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC" cpeOfItem="CPE.wsTarificateur/SI/&quot;Tranche B/C&quot;" exists="true" name="Tranche B/C" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                        <conf:Description>Tranche B/C</conf:Description>
                                        <conf:MatrixResults>
                                            <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="0.5">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.5</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                                <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationRetraite.wsTarificateur/SBL/TrancheBC.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="0.003333333333333334">
                                                    <conf:PropertyValue>
                                                        <conf:numericValue>0.003333333333333334</conf:numericValue>
                                                    </conf:PropertyValue>
                                                </conf:ResultValue>
                                            </conf:ProcessMatrixResult>
                                        </conf:MatrixResults>
                                    </conf:ItemSalesBreakdownLine>
                                </itemXML>
                                							
                                <ItemSheet/>
                                							
                                <ItemQty>1</ItemQty>
                                							
                                <UnitPrice>0.5</UnitPrice>
                                							
                                <ListPrice>0.5</ListPrice>
                                							
                                <StdDiscount>0</StdDiscount>
                                							
                                <DiscPct>0</DiscPct>
                                							
                                <Discount>0</Discount>
                                							
                                <NetPrice>0</NetPrice>
                                							
                                <TotalPrice>0</TotalPrice>
                                							
                                <TotalListPrice>0</TotalListPrice>
                                							
                                <ItemDescr/>
                                						
                            </cartLine>
                            					
                        </cartLines>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="14" parent="1" seqNum="9" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Blank3" cpeOfItem="" exists="true" name="Blank3" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                <conf:Description/>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="15" parent="1" seqNum="10" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante" cpeOfItem="CPE.wsTarificateur/SI/Santé" exists="true" name="Santé" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Santé</conf:Description>
                                <conf:MatrixResults>
                                    <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                        <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante.wsTarificateur/PRGM/pmMultiple.Range[1]" id="Range1" rank="1" value="129.0">
                                            <conf:PropertyValue>
                                                <conf:numericValue>129.0</conf:numericValue>
                                            </conf:PropertyValue>
                                        </conf:ResultValue>
                                        <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/TarificationSante.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="1290.0">
                                            <conf:PropertyValue>
                                                <conf:numericValue>1290.0</conf:numericValue>
                                            </conf:PropertyValue>
                                        </conf:ResultValue>
                                    </conf:ProcessMatrixResult>
                                </conf:MatrixResults>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>129</UnitPrice>
                        					
                        <ListPrice>129</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="16" parent="1" seqNum="11" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/blank4" cpeOfItem="" exists="true" name="blank4" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                <conf:Description/>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="17" parent="1" seqNum="12" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Total" cpeOfItem="CPE.wsTarificateur/SI/Total" exists="true" name="Total" quantity="1.0" subtype="CODIFIED_ITEM" type="CODIFICATION" visible="true" wks="wsTarificateur">
                                <conf:Description>Total</conf:Description>
                                <conf:MatrixResults>
                                    <conf:ProcessMatrixResult cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Total.wsTarificateur/PRGM/pmMultiple" methodId="pmMultiple" methodType="PRICING">
                                        <conf:ResultValue cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/Total.wsTarificateur/PRGM/pmMultiple.Range[2]" id="Range2" rank="2" value="1290.027633333333">
                                            <conf:PropertyValue>
                                                <conf:numericValue>1290.027633333333</conf:numericValue>
                                            </conf:PropertyValue>
                                        </conf:ResultValue>
                                    </conf:ProcessMatrixResult>
                                </conf:MatrixResults>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    				
                    <cartLine datecreate="20230608 093638" dateupdate="20230608 093639" id="18" parent="1" seqNum="13" service="CONF_CCN52" subline="yes" type="CP7">
                        					
                        <itemXML>
                            <conf:ItemSalesBreakdownLine xmlns:cam="com.cameleon.business.xml.settingsTree-7.1.0.0" xmlns:conf="com.cameleon.business.xml.configurationTree-7.1.0.0" cpe="CPE.wsTarificateur/CP/cpOffreMultiple.gp.wsTarificateur/SBL/cpOffreMultiple.wsTarificateur/SBL/sblBlankTextCCNPAYNCAD" cpeOfItem="" exists="true" name="sblBlankTextCCNPAYNCAD" quantity="1.0" type="SALES_BREAKDOWN_LINE" visible="true" wks="wsTarificateur">
                                <conf:Description/>
                            </conf:ItemSalesBreakdownLine>
                        </itemXML>
                        					
                        <ItemSheet/>
                        					
                        <ItemQty>1</ItemQty>
                        					
                        <UnitPrice>0</UnitPrice>
                        					
                        <ListPrice>0</ListPrice>
                        					
                        <StdDiscount>0</StdDiscount>
                        					
                        <DiscPct>0</DiscPct>
                        					
                        <Discount>0</Discount>
                        					
                        <NetPrice>0</NetPrice>
                        					
                        <TotalPrice>0</TotalPrice>
                        					
                        <TotalListPrice>0</TotalListPrice>
                        					
                        <ItemDescr/>
                        				
                    </cartLine>
                    			
                </cartLines>
                		
            </cartLine>
            	
        </cartLines>
        	
        <cartAdjustments>
	</cartAdjustments>
        
    </cart>
</origin>
\" \n}"
    }
  ]
}